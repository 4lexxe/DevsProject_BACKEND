import { body } from "express-validator";

export const validateSectionAndContents = [
  // 游늷 Validar que courseId sea un n칰mero v치lido
  body("courseId")
    .isInt({ gt: 0 })
    .withMessage("El ID del curso debe ser un n칰mero entero positivo"),

  // 游늷 Validar el t칤tulo de la secci칩n
  body("section.title")
    .trim()
    .notEmpty()
    .withMessage("El t칤tulo de la secci칩n es obligatorio")
    .isLength({ min: 3, max: 255 })
    .withMessage("El t칤tulo de la secci칩n debe tener entre 3 y 255 caracteres"),

  // 游늷 Validar la descripci칩n de la secci칩n
  body("section.description")
    .trim()
    .notEmpty()
    .withMessage("La descripci칩n de la secci칩n es obligatoria")
    .isLength({ min: 10, max: 1000 })
    .withMessage("La descripci칩n debe tener entre 10 y 1000 caracteres"),

  // 游늷 Validar la imagen de portada (si existe, debe ser una URL v치lida)
  body("section.coverImage")
    .optional()
    .isURL()
    .withMessage("La imagen de portada debe ser una URL v치lida"),

  // 游늷 Validar el tipo de m칩dulo
  body("section.moduleType")
    .isIn([
      "Introductorio",
      "Principiante",
      "Intermedio",
      "Avanzado",
      "Experto",
      "Insano Hardcore",
    ])
    .withMessage("El tipo de m칩dulo debe ser un valor v치lido"),

  // 游늷 Validar que los contenidos sean un array
  body("section.contents")
    .isArray()
    .withMessage("Los contenidos deben ser un array"),

  // 游늷 Validar cada contenido dentro del array de contenidos
  body("section.contents.*.title")
    .trim()
    .notEmpty()
    .withMessage("El t칤tulo del contenido es obligatorio")
    .isLength({ min: 3, max: 255 })
    .withMessage("El t칤tulo del contenido debe tener entre 3 y 255 caracteres"),

  body("section.contents.*.text")
    .trim()
    .notEmpty()
    .withMessage("El texto del contenido es obligatorio")
    .isLength({ min: 10, max: 1000 })
    .withMessage(
      "El texto del contenido debe tener entre 10 y 1000 caracteres"
    ),

  body("section.contents.*.markdown")
    .optional()
    .isString()
    .withMessage("El campo markdown debe ser una cadena de texto")
    .isLength({ max: 10000 })
    .withMessage("El campo markdown no puede superar los 10000 caracteres"),

  body("section.contents.*.linkType")
    .optional()
    .isString()
    .withMessage("El campo linkType debe ser una cadena de texto")
    .isLength({ max: 50 })
    .withMessage("El linkType no puede superar los 50 caracteres"),

  body("section.contents.*.link")
    .optional()
    .if((value) => value !== "") // Solo aplica la validaci칩n de URL si el valor no es un string vac칤o
    .isURL()
    .withMessage("El campo link debe ser una URL v치lida"),

  // 游늷 Validar el quiz si existe
  body("section.contents.*.quiz")
    .optional()
    .custom((value) => {
      // Acepta null o un array
      if (value === null || Array.isArray(value)) {
        return true;
      }
      throw new Error("El campo quiz debe ser un array o null");
    })
    .withMessage("El campo quiz debe ser un array"),

  body("section.contents.*.quiz.*.question")
    .trim()
    .notEmpty()
    .withMessage("Cada pregunta del quiz debe tener un texto")
    .isLength({ min: 5, max: 255 })
    .withMessage("Cada pregunta debe tener entre 5 y 255 caracteres"),

  body("section.contents.*.quiz.*.type")
    .isIn(["Single", "MultipleChoice", "TrueOrFalse", "ShortAnswer"])
    .withMessage("El tipo de pregunta del quiz debe ser v치lido"),

  body("section.contents.*.quiz.*.answers")
    .isArray({ min: 1 })
    .withMessage("Cada pregunta del quiz debe tener al menos una respuesta"),

  body("section.contents.*.quiz.*.answers.*.answer")
    .trim()
    .notEmpty()
    .withMessage("Cada respuesta del quiz debe tener un texto")
    .isLength({ min: 1, max: 255 })
    .withMessage("Cada respuesta debe tener entre 1 y 255 caracteres"),

  body("section.contents.*.quiz.*.answers.*.isCorrect")
    .isBoolean()
    .withMessage("El campo isCorrect debe ser un booleano"),

  // 游늷 Validar recursos si existen
  body("section.contents.*.resources")
    .optional()
    .custom((value) => {
      // Acepta null o un array
      if (value === null || Array.isArray(value)) {
        return true;
      }
      throw new Error("El campo resources debe ser un array o null");
    })
    .withMessage("El campo resources debe ser un array"),

  body("section.contents.*.resources.*.title")
    .trim()
    .notEmpty()
    .withMessage("Cada recurso debe tener un t칤tulo")
    .isLength({ min: 3, max: 255 })
    .withMessage("Cada t칤tulo de recurso debe tener entre 3 y 255 caracteres"),

  body("section.contents.*.resources.*.url")
    .isURL()
    .withMessage("Cada recurso debe tener una URL v치lida"),

  // 游늷 Validar duraci칩n y posici칩n
  body("section.contents.*.duration")
    .isInt({ gt: 0 })
    .withMessage(
      "La duraci칩n del contenido debe ser un n칰mero entero positivo"
    ),

  body("section.contents.*.position")
    .isInt({ gt: 0 })
    .withMessage(
      "La posici칩n del contenido debe ser un n칰mero entero positivo"
    ),
];
