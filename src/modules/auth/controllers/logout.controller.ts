// logout.controller.ts

// Descripci√≥n: En este archivo se define el controlador para cerrar la sesi√≥n de un usuario. Este controlador se utiliza para manejar la revocaci√≥n de tokens de autenticaci√≥n, destruir la sesi√≥n del usuario y devolver una respuesta de cierre de sesi√≥n al cliente.

import { Request, Response } from "express";
import User from "../../user/User";
import { revokeToken } from "../../../shared/middleware/authMiddleware";

export class LogoutController {
  static async handle(req: Request, res: Response): Promise<void> {
    try {
      // Obtener usuario de la sesi√≥n
      const user = req.user as User;
      
      if (!user || !user.id) {
        console.warn("‚ö†Ô∏è No se encontr√≥ usuario en la sesi√≥n durante el cierre de sesi√≥n");
        res.status(401).json({ error: "No se encontr√≥ sesi√≥n" });
        return;
      }

      const token = req.headers.authorization?.split(" ")[1];
      
      // Revocar token si est√° presente
      if (token) {
        await revokeToken(user.id, token);
      }

      // Actualizar estado de la sesi√≥n del usuario con manejo especial para usuarios de Discord
      try {
        if (user.authProvider === 'discord') {
          // Actualizar expl√≠citamente para usuarios de Discord
          await User.update(
            {
              isActiveSession: false,
              lastActiveAt: new Date()
            },
            {
              where: { 
                id: user.id,
                authProvider: 'discord'
              }
            }
          );
          console.log('üéÆ Sesi√≥n de usuario de Discord desactivada expl√≠citamente');
        } else if (user.authProvider === 'github') {
          // Actualizar estado de la sesi√≥n del usuario con manejo especial para usuarios de GitHub
          await User.update(
            {
              isActiveSession: false,
              lastActiveAt: new Date()
            },
            {
              where: { 
                id: user.id,
                authProvider: 'github'
              }
            }
          );
          console.log('üíª Sesi√≥n de usuario de GitHub desactivada expl√≠citamente');
        } else {
          // Actualizar regularmente para otros usuarios
          await User.update(
            {
              isActiveSession: false,
              lastActiveAt: new Date()
            },
            {
              where: { id: user.id }
            }
          );
          console.log('üìß Sesi√≥n de usuario local desactivada');
        }

        // Registrar informaci√≥n de cierre de sesi√≥n del usuario con emojis
        const providerEmoji = user.authProvider === 'discord' ? 'üéÆ Discord' : 
                             user.authProvider === 'github' ? 'üíª GitHub' : 
                             'üìß Local';

        console.log(`
üö™ Usuario cerr√≥ sesi√≥n:
üë§ Nombre de usuario: ${user.username}
üìù Nombre para mostrar: ${user.displayName}
üîë Proveedor de autenticaci√≥n: ${providerEmoji}
‚è∞ √öltima actividad: ${new Date().toLocaleString()}
üìç √öltima IP de inicio de sesi√≥n: ${user.lastLoginIp}
üåç Ubicaci√≥n: ${user.lastLoginGeo?.city}, ${user.lastLoginGeo?.country}
üîí Estado de la sesi√≥n: Desactivada
        `);

      } catch (updateError) {
        console.error("‚ùå Error al actualizar el estado de la sesi√≥n del usuario:", updateError);
      }

      // Destruir sesi√≥n
      req.session.destroy((err) => {
        if (err) {
          console.error("‚ùå Error al destruir la sesi√≥n:", err);
          return res.status(500).json({ error: "Error al cerrar sesi√≥n" });
        }

        // Limpiar cookie de sesi√≥n
        res.clearCookie("sessionId");
        
        res.json({
          message: "‚úÖ Sesi√≥n cerrada correctamente",
          success: true,
          userInfo: {
            username: user.username,
            displayName: user.displayName,
            authProvider: user.authProvider,
            lastActiveAt: new Date(),
            isActiveSession: false
          }
        });
      });
    } catch (error) {
      console.error("‚ùå Error durante el cierre de sesi√≥n:", error);
      res.status(500).json({ error: "Error al cerrar sesi√≥n" });
    }
  }
}